{"version":3,"sources":["components/UserMessage/UserMessage.module.css","components/common/Button/Button.module.css","components/common/Input/Input.module.css","components/common/Checkbox/Checkbox.module.css","components/UserMessage/UserMessage.tsx","components/Todo/Todo.tsx","components/common/Input/Input.tsx","components/common/Button/Button.tsx","components/SayHi/SayHi.tsx","components/common/Checkbox/Checkbox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","UserMessage","props","className","styles","wrap","colLeft","imgWrap","src","alt","name","colRight","message","Todo","onClick","filterTasks","tasks","map","task","key","id","priority","removeTask","Input","type","value","onChange","e","currentTarget","onKeyPress","charCode","input","error","Button","button","style","danger","standard","text","SayHi","useState","names","setNames","sayHi","alert","addNewName","newName","v1","length","n","Checkbox","checked","checkbox","App","setTasks","filter","setFilter","filteredTasks","inputValue","setInputValue","inputValueTask4","setInputValueTask4","setChecked","newTasks","newValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.dba2d0ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"UserMessage_wrap__3epS5\",\"colLeft\":\"UserMessage_colLeft__3ba-e\",\"imgWrap\":\"UserMessage_imgWrap__ack3N\",\"colRight\":\"UserMessage_colRight__3O8Sk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__r4otx\",\"danger\":\"Button_danger__3xP9o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2s7n7\",\"error\":\"Input_error__2XMiX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Checkbox_input__j4x9U\"};","import React from 'react';\r\nimport styles from './UserMessage.module.css';\r\n\r\nexport type UserMessageType = {\r\n\tname: string\r\n\tmessage: string\r\n}\r\n\r\nconst UserMessage = (props: UserMessageType) => {\r\n\treturn (\r\n\t\t\t<div className={styles.wrap}>\r\n\t\t\t\t<div className={styles.colLeft}>\r\n\t\t\t\t\t<div className={styles.imgWrap}>\r\n\t\t\t\t\t\t<img src='https://placeimg.com/50/50/tech' alt={props.name}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.colRight}>\r\n\t\t\t\t\t<h3>{props.name}</h3>\r\n\t\t\t\t\t<p>{props.message}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default UserMessage;","import React from 'react';\r\n\r\nexport type PriorityType = 'all' | 'high' | 'middle' | 'low'\r\n\r\nexport type  TasksType = {\r\n\tid: number,\r\n\tname: string,\r\n\tpriority: PriorityType\r\n}\r\n\r\nexport type TodoPropsType = {\r\n\ttasks: Array<TasksType>\r\n\tfilterTasks: (value: PriorityType) => void\r\n\tremoveTask: (id: number) => void\r\n}\r\n\r\nconst Todo = (props: TodoPropsType) => {\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button onClick={() => props.filterTasks('all')}>All</button>\r\n\t\t\t\t\t<button onClick={() => props.filterTasks('high')}>High</button>\r\n\t\t\t\t\t<button onClick={() => props.filterTasks('middle')}>Middle</button>\r\n\t\t\t\t\t<button onClick={() => props.filterTasks('low')}>Low</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{props.tasks.map((task) =>\r\n\t\t\t\t\t\t\t<li key={task.id}>\r\n\t\t\t\t\t\t\t\t<b>{task.name}</b>\r\n\t\t\t\t\t\t\t\t<small><i> {task.priority} </i></small>\r\n\t\t\t\t\t\t\t\t<button onClick={() => props.removeTask(task.id)}>delete</button>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Todo;","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nconst Input = (props: InputType) => {\r\n\r\n\tconst onInputChange = (e: ChangeEvent<HTMLInputElement>) => props.onChange(e.currentTarget.value)\r\n\r\n\tconst onKeyInputPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (e.charCode === 13) {\r\n\t\t\tprops.onKeyPress()\r\n\t\t}\r\n\t}\r\n\r\n\treturn <input\r\n\t\t\ttype='text'\r\n\t\t\tvalue={props.value}\r\n\t\t\tonChange={onInputChange}\r\n\t\t\tonKeyPress={onKeyInputPressHandler}\r\n\t\t\tclassName={`${styles.input} ${props.error && styles.error}`}/>\r\n}\r\n\r\nexport default Input;\r\n\r\n\r\n// TYPES\r\nexport type InputType = {\r\n\tvalue: string\r\n\tonChange: (newValue: string) => void\r\n\tonKeyPress: () => void\r\n\terror?: boolean\r\n}","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n\tconst onClickHandler = () => {\r\n\t\tprops.onClick()\r\n\t}\r\n\treturn (\r\n\t\t\t<button\r\n\t\t\t\t\tonClick={onClickHandler}\r\n\t\t\t\t\tclassName={`${styles.button} ${props.style === 'danger' && styles.danger} ${props.style === 'standard' && styles.standard}`}>\r\n\t\t\t\t{props.text}</button>\r\n\t)\r\n}\r\n\r\nexport default Button;\r\n\r\n\r\n// TYPES\r\ntype ButtonPropsType = {\r\n\ttext: string\r\n\tonClick: () => void\r\n\tstyle?: 'danger' | 'standard'\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport Input from '../common/Input/Input';\r\nimport Button from '../common/Button/Button';\r\n\r\nconst SayHi = (props: SayHiType) => {\r\n\r\n\tlet [names, setNames] = useState<Array<NameType>>([])\r\n\r\n\tfunction sayHi() {\r\n\t\tif (props.value) {\r\n\t\t\talert(`Hi, ${props.value}`)\r\n\t\t\tprops.onChange('')\r\n\t\t}\r\n\t}\r\n\r\n\tconst addNewName = () => {\r\n\t\tlet newName: NameType = {id: v1(), name: props.value}\r\n\t\tnames = [...names, newName]\r\n\t\tsetNames([...names])\r\n\t}\r\n\r\n\tconst onKeyInputPressHandler = () => {\r\n\t\tsayHi()\r\n\t\taddNewName()\r\n\t}\r\n\r\n\tconst onClickBtnHandler = () => {\r\n\t\tsayHi()\r\n\t\taddNewName()\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<Input onChange={props.onChange} onKeyPress={onKeyInputPressHandler} value={props.value}/>\r\n\t\t\t\t<Button text={'Say Hi'} onClick={onClickBtnHandler}/>\r\n\r\n\t\t\t\t<div>( {names.length} )</div>\r\n\t\t\t\t{names.map(n => <p key={n.id}>{n.name} </p>)}\r\n\t\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SayHi;\r\n\r\n\r\n// TYPES\r\nexport type SayHiType = {\r\n\tvalue: string\r\n\tonChange: (newValue: string) => void\r\n}\r\n\r\nexport type NameType = {\r\n\tid: string\r\n\tname: string\r\n}","import React, {ChangeEvent} from 'react';\r\nimport styles from './Checkbox.module.css';\r\n\r\nconst Checkbox = (props: InputType) => {\r\n\r\n\tconst onCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => props.onChange(e.currentTarget.checked)\r\n\r\n\treturn <input type='checkbox' checked={props.checked} onChange={onCheckboxChange} className={styles.checkbox}/>\r\n}\r\n\r\nexport default Checkbox;\r\n\r\n\r\n// TYPES\r\nexport type InputType = {\r\n\tchecked: boolean\r\n\tonChange: (checked: boolean) => void\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport UserMessage from './components/UserMessage/UserMessage';\nimport Todo, {PriorityType, TasksType} from './components/Todo/Todo';\nimport SayHi from './components/SayHi/SayHi';\nimport Input from './components/common/Input/Input';\nimport Button from './components/common/Button/Button';\nimport Checkbox from './components/common/Checkbox/Checkbox';\n\nfunction App() {\n\n\tconst [tasks, setTasks] = useState<Array<TasksType>>([\n\t\t{id: 1, name: 'Paddle Surf', priority: 'middle'},\n\t\t{id: 2, name: 'Learn JS', priority: 'high'},\n\t\t{id: 3, name: 'Learn React', priority: 'high'},\n\t\t{id: 4, name: 'Swim', priority: 'middle'},\n\t\t{id: 5, name: 'Sleep', priority: 'low'},\n\t\t{id: 6, name: 'Buy bread', priority: 'low'},\n\t\t{id: 7, name: 'Do something', priority: 'low'}\n\t])\n\n\tlet [filter, setFilter] = useState<PriorityType>('all')\n\n\t// Task2: remove task\n\tfunction removeTask(id: number) {\n\t\tlet newTasks = tasks.filter(task => task.id !== id)\n\t\tsetTasks([...newTasks])\n\t}\n\n\t// Task 2: filter tasks by priority\n\tlet filteredTasks = tasks;\n\tif (filter === 'high') {\n\t\tfilteredTasks = tasks.filter(task => task.priority === filter)\n\t}\n\tif (filter === 'middle') {\n\t\tfilteredTasks = tasks.filter(task => task.priority === filter)\n\t}\n\tif (filter === 'low') {\n\t\tfilteredTasks = tasks.filter(task => task.priority === filter)\n\t}\n\n\tfunction changeFilter(value: PriorityType) {\n\t\tsetFilter(value)\n\t}\n\n\n\t// Task 3: SayHi State\n\tconst [inputValue, setInputValue] = useState<string>('')\n\tconst changeInputValue = (newValue: string) => setInputValue(newValue)\n\n\t// Task 4: demo state for a standard input\n\tconst [inputValueTask4, setInputValueTask4] = useState<string>('')\n\tconst [checked, setChecked] = useState<boolean>(true)\n\tconst onChangeInputTask4 = (newValue: string) => setInputValueTask4(newValue)\n\tconst onKeyPressInputTask4 = () => setInputValueTask4('');\n\tconst onCheckboxChange = (checked: boolean) => setChecked(checked)\n\n\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h2>Task 1: Message block</h2>\n\t\t\t\t<UserMessage\n\t\t\t\t\t\tname={'Katia'}\n\t\t\t\t\t\tmessage={'How are you?'}/>\n\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\n\t\t\t\t<h2>Task 2: Filter an array</h2>\n\t\t\t\t<Todo\n\t\t\t\t\t\ttasks={filteredTasks}\n\t\t\t\t\t\tfilterTasks={changeFilter}\n\t\t\t\t\t\tremoveTask={removeTask}\n\t\t\t\t/>\n\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\n\t\t\t\t<h2>Task 3: Say Hi</h2>\n\t\t\t\t<SayHi\n\t\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\t\tonChange={changeInputValue}/>\n\n\t\t\t\t<h2>Task 4: Standard Components</h2>\n\n\t\t\t\t<Checkbox checked={checked} onChange={onCheckboxChange}/>\n\t\t\t\t<Input value={inputValueTask4} onChange={onChangeInputTask4} onKeyPress={onKeyPressInputTask4} error={true}/>\n\t\t\t\t<Button text={'I am a demo btn'} onClick={() => alert('Hello')} style={'danger'}/>\n\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\n\t\t\t</div>\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}